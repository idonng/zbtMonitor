package com.zbt.yqjk.common;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URLEncoder;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;

import com.zbt.yqjk.controller.ReportController;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;

public class ExportWord {
	
	private static final Logger logger = Logger.getLogger(ExportWord.class);
	
	private Configuration configuration = null;

	public ExportWord() {
		configuration = new Configuration();
		configuration.setDefaultEncoding("utf-8");
	}

	 //document写入新的文件  
    public void writerDocumentToNewFile(Document document,String xmlpath){  
        //输出格式  
        OutputFormat format = OutputFormat.createPrettyPrint();  
        //设置编码  
        format.setEncoding("UTF-8");  
       
       try {
        	 //XMLWriter 指定输出文件以及格式  
            XMLWriter writer = new XMLWriter(new OutputStreamWriter(
            		new FileOutputStream(new File(xmlpath)),
            		"UTF-8"), format);  
            //写入新文件  
			writer.write(document);
			writer.flush();  
	        writer.close();  
	        logger.info("模板xml文件-"+xmlpath+"写入成功！");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.info("模板xml文件"+xmlpath+"写入失败！");
		}  
       
    }  
    
	public void exported(Map<String,Object> map ,String xmlPath,String imagePath,String docName,HttpServletResponse response ) {
		/**
		 * 导出word
		 */
		try {
			configuration.setDirectoryForTemplateLoading(new File(xmlPath));
			Template t = configuration.getTemplate("temp.xml");
			Writer out = null;
			try {
				//设置自选路径
				response.setCharacterEncoding("UTF-8");
				response.setContentType("application/msword");
				response.setHeader(
						"content-disposition",
						"attachment; filename="+URLEncoder.encode(docName, "UTF-8")+".doc");
				out = new BufferedWriter(new OutputStreamWriter(
						response.getOutputStream(), "UTF-8"), 10240);
				logger.info(docName+"-自选路径设置成功！");
			} catch (Exception e) {
				e.printStackTrace();
				logger.error("-自选路径设置失败");
			}			
			try {
				t.process(map, out);
				out.flush();
				out.close();
				logger.info(docName+"freemark导出word-"+docName+"成功！");
			} catch (TemplateException e) {
				e.printStackTrace();
			}

		} catch (IOException e) {
			e.printStackTrace();
			logger.error("freemark导出word-"+docName+"失败！",e);
		}
	}
}
